[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "ABC",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "abstractmethod",
        "importPath": "abc",
        "description": "abc",
        "isExtraImport": true,
        "detail": "abc",
        "documentation": {}
    },
    {
        "label": "CadastroType",
        "importPath": "src.models.types.cadastro_type",
        "description": "src.models.types.cadastro_type",
        "isExtraImport": true,
        "detail": "src.models.types.cadastro_type",
        "documentation": {}
    },
    {
        "label": "CadastroType",
        "importPath": "src.models.types.cadastro_type",
        "description": "src.models.types.cadastro_type",
        "isExtraImport": true,
        "detail": "src.models.types.cadastro_type",
        "documentation": {}
    },
    {
        "label": "CadastroType",
        "importPath": "src.models.types.cadastro_type",
        "description": "src.models.types.cadastro_type",
        "isExtraImport": true,
        "detail": "src.models.types.cadastro_type",
        "documentation": {}
    },
    {
        "label": "CadastroType",
        "importPath": "src.models.types.cadastro_type",
        "description": "src.models.types.cadastro_type",
        "isExtraImport": true,
        "detail": "src.models.types.cadastro_type",
        "documentation": {}
    },
    {
        "label": "CadastroType",
        "importPath": "src.models.types.cadastro_type",
        "description": "src.models.types.cadastro_type",
        "isExtraImport": true,
        "detail": "src.models.types.cadastro_type",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.types_view.http_response",
        "description": "src.views.types_view.http_response",
        "isExtraImport": true,
        "detail": "src.views.types_view.http_response",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.types_view.http_response",
        "description": "src.views.types_view.http_response",
        "isExtraImport": true,
        "detail": "src.views.types_view.http_response",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.types_view.http_response",
        "description": "src.views.types_view.http_response",
        "isExtraImport": true,
        "detail": "src.views.types_view.http_response",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.types_view.http_response",
        "description": "src.views.types_view.http_response",
        "isExtraImport": true,
        "detail": "src.views.types_view.http_response",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "importPath": "src.views.types_view.http_response",
        "description": "src.views.types_view.http_response",
        "isExtraImport": true,
        "detail": "src.views.types_view.http_response",
        "documentation": {}
    },
    {
        "label": "ICadastroRepo",
        "importPath": "src.models.repositories.interface.Icadastro_repo",
        "description": "src.models.repositories.interface.Icadastro_repo",
        "isExtraImport": true,
        "detail": "src.models.repositories.interface.Icadastro_repo",
        "documentation": {}
    },
    {
        "label": "ICadastroRepo",
        "importPath": "src.models.repositories.interface.Icadastro_repo",
        "description": "src.models.repositories.interface.Icadastro_repo",
        "isExtraImport": true,
        "detail": "src.models.repositories.interface.Icadastro_repo",
        "documentation": {}
    },
    {
        "label": "ICadastroController",
        "importPath": "src.controllers.interface.Icadastro_controller",
        "description": "src.controllers.interface.Icadastro_controller",
        "isExtraImport": true,
        "detail": "src.controllers.interface.Icadastro_controller",
        "documentation": {}
    },
    {
        "label": "ICadastroController",
        "importPath": "src.controllers.interface.Icadastro_controller",
        "description": "src.controllers.interface.Icadastro_controller",
        "isExtraImport": true,
        "detail": "src.controllers.interface.Icadastro_controller",
        "documentation": {}
    },
    {
        "label": "HttpNotFoundError",
        "importPath": "src.errors.types.http_not_found",
        "description": "src.errors.types.http_not_found",
        "isExtraImport": true,
        "detail": "src.errors.types.http_not_found",
        "documentation": {}
    },
    {
        "label": "HttpNotFoundError",
        "importPath": "src.errors.types.http_not_found",
        "description": "src.errors.types.http_not_found",
        "isExtraImport": true,
        "detail": "src.errors.types.http_not_found",
        "documentation": {}
    },
    {
        "label": "HttpNotFoundError",
        "importPath": "src.errors.types.http_not_found",
        "description": "src.errors.types.http_not_found",
        "isExtraImport": true,
        "detail": "src.errors.types.http_not_found",
        "documentation": {}
    },
    {
        "label": "HttpNotFoundError",
        "importPath": "src.errors.types.http_not_found",
        "description": "src.errors.types.http_not_found",
        "isExtraImport": true,
        "detail": "src.errors.types.http_not_found",
        "documentation": {}
    },
    {
        "label": "PessoaEntity",
        "importPath": "src.models.entities.pessoas",
        "description": "src.models.entities.pessoas",
        "isExtraImport": true,
        "detail": "src.models.entities.pessoas",
        "documentation": {}
    },
    {
        "label": "PessoaEntity",
        "importPath": "src.models.entities.pessoas",
        "description": "src.models.entities.pessoas",
        "isExtraImport": true,
        "detail": "src.models.entities.pessoas",
        "documentation": {}
    },
    {
        "label": "HttpUnprocessableEntityError",
        "importPath": "src.errors.types.http_unprocessable_entity_error",
        "description": "src.errors.types.http_unprocessable_entity_error",
        "isExtraImport": true,
        "detail": "src.errors.types.http_unprocessable_entity_error",
        "documentation": {}
    },
    {
        "label": "HttpUnprocessableEntityError",
        "importPath": "src.errors.types.http_unprocessable_entity_error",
        "description": "src.errors.types.http_unprocessable_entity_error",
        "isExtraImport": true,
        "detail": "src.errors.types.http_unprocessable_entity_error",
        "documentation": {}
    },
    {
        "label": "HttpUnprocessableEntityError",
        "importPath": "src.errors.types.http_unprocessable_entity_error",
        "description": "src.errors.types.http_unprocessable_entity_error",
        "isExtraImport": true,
        "detail": "src.errors.types.http_unprocessable_entity_error",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.types_view.http_request",
        "description": "src.views.types_view.http_request",
        "isExtraImport": true,
        "detail": "src.views.types_view.http_request",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "importPath": "src.views.types_view.http_request",
        "description": "src.views.types_view.http_request",
        "isExtraImport": true,
        "detail": "src.views.types_view.http_request",
        "documentation": {}
    },
    {
        "label": "CadastroController",
        "importPath": "src.controllers.cadastro_controller",
        "description": "src.controllers.cadastro_controller",
        "isExtraImport": true,
        "detail": "src.controllers.cadastro_controller",
        "documentation": {}
    },
    {
        "label": "CadastroRepository",
        "importPath": "src.models.repositories.cadastro_repository",
        "description": "src.models.repositories.cadastro_repository",
        "isExtraImport": true,
        "detail": "src.models.repositories.cadastro_repository",
        "documentation": {}
    },
    {
        "label": "CadastroView",
        "importPath": "src.views.cadastro_view",
        "description": "src.views.cadastro_view",
        "isExtraImport": true,
        "detail": "src.views.cadastro_view",
        "documentation": {}
    },
    {
        "label": "cadastro_compose",
        "importPath": "src.main.composer.cadastro_compose",
        "description": "src.main.composer.cadastro_compose",
        "isExtraImport": true,
        "detail": "src.main.composer.cadastro_compose",
        "documentation": {}
    },
    {
        "label": "request_adapter",
        "importPath": "src.main.adapter.request_adapter",
        "description": "src.main.adapter.request_adapter",
        "isExtraImport": true,
        "detail": "src.main.adapter.request_adapter",
        "documentation": {}
    },
    {
        "label": "handle_errors",
        "importPath": "src.errors.handle_errors",
        "description": "src.errors.handle_errors",
        "isExtraImport": true,
        "detail": "src.errors.handle_errors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "app_routes_bp",
        "importPath": "src.main.routes.cadastro",
        "description": "src.main.routes.cadastro",
        "isExtraImport": true,
        "detail": "src.main.routes.cadastro",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DATABASE_NAME",
        "importPath": "src.constants.constants",
        "description": "src.constants.constants",
        "isExtraImport": true,
        "detail": "src.constants.constants",
        "documentation": {}
    },
    {
        "label": "HOST_DB",
        "importPath": "src.constants.constants",
        "description": "src.constants.constants",
        "isExtraImport": true,
        "detail": "src.constants.constants",
        "documentation": {}
    },
    {
        "label": "PASSWORD_DB",
        "importPath": "src.constants.constants",
        "description": "src.constants.constants",
        "isExtraImport": true,
        "detail": "src.constants.constants",
        "documentation": {}
    },
    {
        "label": "USER_DB",
        "importPath": "src.constants.constants",
        "description": "src.constants.constants",
        "isExtraImport": true,
        "detail": "src.constants.constants",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.configs.base",
        "description": "src.models.configs.base",
        "isExtraImport": true,
        "detail": "src.models.configs.base",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "src.models.configs.base",
        "description": "src.models.configs.base",
        "isExtraImport": true,
        "detail": "src.models.configs.base",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "src.models.configs.connection",
        "description": "src.models.configs.connection",
        "isExtraImport": true,
        "detail": "src.models.configs.connection",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "importPath": "src.models.configs.connection",
        "description": "src.models.configs.connection",
        "isExtraImport": true,
        "detail": "src.models.configs.connection",
        "documentation": {}
    },
    {
        "label": "Validator",
        "importPath": "cerberus",
        "description": "cerberus",
        "isExtraImport": true,
        "detail": "cerberus",
        "documentation": {}
    },
    {
        "label": "Validator",
        "importPath": "cerberus",
        "description": "cerberus",
        "isExtraImport": true,
        "detail": "cerberus",
        "documentation": {}
    },
    {
        "label": "Validator",
        "importPath": "cerberus",
        "description": "cerberus",
        "isExtraImport": true,
        "detail": "cerberus",
        "documentation": {}
    },
    {
        "label": "Validator",
        "importPath": "cerberus",
        "description": "cerberus",
        "isExtraImport": true,
        "detail": "cerberus",
        "documentation": {}
    },
    {
        "label": "handle_validations",
        "importPath": "src.validators.handle_validation",
        "description": "src.validators.handle_validation",
        "isExtraImport": true,
        "detail": "src.validators.handle_validation",
        "documentation": {}
    },
    {
        "label": "user_name_validator",
        "importPath": "src.validators.validations.user_name_validator",
        "description": "src.validators.validations.user_name_validator",
        "isExtraImport": true,
        "detail": "src.validators.validations.user_name_validator",
        "documentation": {}
    },
    {
        "label": "body_validator",
        "importPath": "src.validators.validations.insert_user_validator",
        "description": "src.validators.validations.insert_user_validator",
        "isExtraImport": true,
        "detail": "src.validators.validations.insert_user_validator",
        "documentation": {}
    },
    {
        "label": "app",
        "importPath": "src.main.serve",
        "description": "src.main.serve",
        "isExtraImport": true,
        "detail": "src.main.serve",
        "documentation": {}
    },
    {
        "label": "USER_DB",
        "kind": 5,
        "importPath": "src.constants.constants",
        "description": "src.constants.constants",
        "peekOfCode": "USER_DB = os.getenv(\"USER_DB\")\nPASSWORD_DB = os.getenv(\"PASSWORD_DB\")\nHOST_DB = os.getenv(\"HOST_DB\")\nDATABASE_NAME = os.getenv(\"DATABASE_NAME\")",
        "detail": "src.constants.constants",
        "documentation": {}
    },
    {
        "label": "PASSWORD_DB",
        "kind": 5,
        "importPath": "src.constants.constants",
        "description": "src.constants.constants",
        "peekOfCode": "PASSWORD_DB = os.getenv(\"PASSWORD_DB\")\nHOST_DB = os.getenv(\"HOST_DB\")\nDATABASE_NAME = os.getenv(\"DATABASE_NAME\")",
        "detail": "src.constants.constants",
        "documentation": {}
    },
    {
        "label": "HOST_DB",
        "kind": 5,
        "importPath": "src.constants.constants",
        "description": "src.constants.constants",
        "peekOfCode": "HOST_DB = os.getenv(\"HOST_DB\")\nDATABASE_NAME = os.getenv(\"DATABASE_NAME\")",
        "detail": "src.constants.constants",
        "documentation": {}
    },
    {
        "label": "DATABASE_NAME",
        "kind": 5,
        "importPath": "src.constants.constants",
        "description": "src.constants.constants",
        "peekOfCode": "DATABASE_NAME = os.getenv(\"DATABASE_NAME\")",
        "detail": "src.constants.constants",
        "documentation": {}
    },
    {
        "label": "ICadastroController",
        "kind": 6,
        "importPath": "src.controllers.interface.Icadastro_controller",
        "description": "src.controllers.interface.Icadastro_controller",
        "peekOfCode": "class ICadastroController(ABC):\n    @abstractmethod\n    def cadastrar_pessoa(self, pessoa: CadastroType) -> HttpResponse:\n        pass\n    @abstractmethod\n    def buscar_pessoa_por_nome(self, nome: str) -> HttpResponse:\n        pass\n    @abstractmethod\n    def deletar_pessoa_pelo_nome(self, nome: str) -> HttpResponse:\n        pass",
        "detail": "src.controllers.interface.Icadastro_controller",
        "documentation": {}
    },
    {
        "label": "CadastroController",
        "kind": 6,
        "importPath": "src.controllers.cadastro_controller",
        "description": "src.controllers.cadastro_controller",
        "peekOfCode": "class CadastroController(ICadastroController):\n    def __init__(self, cadastro_db: ICadastroRepo):\n        self.cadastro_db = cadastro_db\n    def cadastrar_pessoa(self, pessoa: CadastroType) -> HttpResponse:\n        self.cadastro_db.insert_client(pessoa)\n        return self.__format_response(\n            person=pessoa, status_code=201, message=\"Cadastro Realizado Com Sucesso\"\n        )\n    def buscar_pessoa_por_nome(self, nome: str):\n        query = self.cadastro_db.search_client_by_name(nome)",
        "detail": "src.controllers.cadastro_controller",
        "documentation": {}
    },
    {
        "label": "SpyCadastroRepo",
        "kind": 6,
        "importPath": "src.controllers.cadastro_controller_test",
        "description": "src.controllers.cadastro_controller_test",
        "peekOfCode": "class SpyCadastroRepo:\n    def __init__(self) -> None:\n        self.search_client_by_name_attribute = {}\n    def search_client_by_name(self, name: str) -> PessoaEntity:\n        self.search_client_by_name_attribute[\"name\"] = name\n        return PessoaEntity(\n            id=123,\n            nome=\"ze da manga\",\n            idade=10,\n            bairro=\"something\",",
        "detail": "src.controllers.cadastro_controller_test",
        "documentation": {}
    },
    {
        "label": "SpyCadastroRepoNotFoundError",
        "kind": 6,
        "importPath": "src.controllers.cadastro_controller_test",
        "description": "src.controllers.cadastro_controller_test",
        "peekOfCode": "class SpyCadastroRepoNotFoundError:\n    def __init__(self) -> None:\n        self.search_client_by_name_attribute = {}\n    def search_client_by_name(self, name: str) -> PessoaEntity:\n        self.search_client_by_name_attribute[\"name\"] = name\n        return None\ndef test_buscar_pessoa_por_nome():\n    mock_name = \"olaMundo\"\n    repo = SpyCadastroRepo()\n    controller = CadastroController(repo)",
        "detail": "src.controllers.cadastro_controller_test",
        "documentation": {}
    },
    {
        "label": "test_buscar_pessoa_por_nome",
        "kind": 2,
        "importPath": "src.controllers.cadastro_controller_test",
        "description": "src.controllers.cadastro_controller_test",
        "peekOfCode": "def test_buscar_pessoa_por_nome():\n    mock_name = \"olaMundo\"\n    repo = SpyCadastroRepo()\n    controller = CadastroController(repo)\n    response = controller.buscar_pessoa_por_nome(mock_name)\n    assert repo.search_client_by_name_attribute[\"name\"] == mock_name\n    assert isinstance(response, dict)\n    assert \"status_code\" in response\n    assert isinstance(response[\"status_code\"], int)\n    assert \"response\" in response",
        "detail": "src.controllers.cadastro_controller_test",
        "documentation": {}
    },
    {
        "label": "test_buscar_pessoa_por_nome_not_found",
        "kind": 2,
        "importPath": "src.controllers.cadastro_controller_test",
        "description": "src.controllers.cadastro_controller_test",
        "peekOfCode": "def test_buscar_pessoa_por_nome_not_found():\n    mock_name = \"olaMundo\"\n    repo = SpyCadastroRepoNotFoundError()\n    controller = CadastroController(repo)\n    try:\n        controller.buscar_pessoa_por_nome(mock_name)\n        assert False\n    except Exception as exception:\n        assert repo.search_client_by_name_attribute[\"name\"] == mock_name\n        assert isinstance(exception, HttpNotFoundError)",
        "detail": "src.controllers.cadastro_controller_test",
        "documentation": {}
    },
    {
        "label": "HttpNotFoundError",
        "kind": 6,
        "importPath": "src.errors.types.http_not_found",
        "description": "src.errors.types.http_not_found",
        "peekOfCode": "class HttpNotFoundError(Exception):\n    \"\"\"Class to generate Not found 404 Http\n    :param Exception: _description_\n    :type Exception: _type_\n    \"\"\"\n    def __init__(self, message: str) -> None:\n        super().__init__(message)\n        self.message = message\n        self.name = \"NotFound\"\n        self.status_code = 404",
        "detail": "src.errors.types.http_not_found",
        "documentation": {}
    },
    {
        "label": "HttpUnprocessableEntityError",
        "kind": 6,
        "importPath": "src.errors.types.http_unprocessable_entity_error",
        "description": "src.errors.types.http_unprocessable_entity_error",
        "peekOfCode": "class HttpUnprocessableEntityError(Exception):\n    def __init__(self, message: str) -> None:\n        super().__init__(message)\n        self.message = message\n        self.name = \"UnprocessableEntity\"\n        self.status_code = 422",
        "detail": "src.errors.types.http_unprocessable_entity_error",
        "documentation": {}
    },
    {
        "label": "handle_errors",
        "kind": 2,
        "importPath": "src.errors.handle_errors",
        "description": "src.errors.handle_errors",
        "peekOfCode": "def handle_errors(error: Exception) -> dict:\n    \"\"\"\n    Handle  to treat Exception Cases\n    :param error: Exception\n    :type error: Exception\n    :return: Dict with data and status_code\n    \"\"\"\n    if isinstance(error, HttpNotFoundError):\n        return {\"data\": {\"error\": error.message}, \"status_code\": error.status_code}\n    if isinstance(error, HttpUnprocessableEntityError):",
        "detail": "src.errors.handle_errors",
        "documentation": {}
    },
    {
        "label": "request_adapter",
        "kind": 2,
        "importPath": "src.main.adapter.request_adapter",
        "description": "src.main.adapter.request_adapter",
        "peekOfCode": "def request_adapter(request: FlaskRequest):\n    http_request = HttpRequest(\n        headers=request.headers,\n        body=request.json,\n        query_params=request.args,\n        url=request.full_path,\n    )\n    return http_request",
        "detail": "src.main.adapter.request_adapter",
        "documentation": {}
    },
    {
        "label": "cadastro_compose",
        "kind": 2,
        "importPath": "src.main.composer.cadastro_compose",
        "description": "src.main.composer.cadastro_compose",
        "peekOfCode": "def cadastro_compose():\n    cadastro_db = CadastroRepository()\n    cadastro_controller = CadastroController(cadastro_db)\n    cadastro_view = CadastroView(cadastro_controller)\n    return cadastro_view",
        "detail": "src.main.composer.cadastro_compose",
        "documentation": {}
    },
    {
        "label": "index",
        "kind": 2,
        "importPath": "src.main.routes.cadastro",
        "description": "src.main.routes.cadastro",
        "peekOfCode": "def index():\n    return \"Hello to register clients!\"\n@app_routes_bp.route(\"/cadastro\", methods=[\"POST\"])\ndef cadastro():\n    http_request = request_adapter(request)\n    response = cadastro_compose().cadastrar_view(http_request)\n    return response\n@app_routes_bp.route(\"/delete\", methods=[\"PUT\"])\ndef delete():\n    http_request = request_adapter(request)",
        "detail": "src.main.routes.cadastro",
        "documentation": {}
    },
    {
        "label": "cadastro",
        "kind": 2,
        "importPath": "src.main.routes.cadastro",
        "description": "src.main.routes.cadastro",
        "peekOfCode": "def cadastro():\n    http_request = request_adapter(request)\n    response = cadastro_compose().cadastrar_view(http_request)\n    return response\n@app_routes_bp.route(\"/delete\", methods=[\"PUT\"])\ndef delete():\n    http_request = request_adapter(request)\n    response = cadastro_compose().deletar_view(http_request)\n    return response\n@app_routes_bp.route(\"/pesquisar\", methods=[\"POST\"])",
        "detail": "src.main.routes.cadastro",
        "documentation": {}
    },
    {
        "label": "delete",
        "kind": 2,
        "importPath": "src.main.routes.cadastro",
        "description": "src.main.routes.cadastro",
        "peekOfCode": "def delete():\n    http_request = request_adapter(request)\n    response = cadastro_compose().deletar_view(http_request)\n    return response\n@app_routes_bp.route(\"/pesquisar\", methods=[\"POST\"])\ndef pesquisa():\n    http_request = request_adapter(request)\n    response = cadastro_compose().buscar_view(http_request)\n    return response\n@app_routes_bp.route(\"/atualizar\", methods=[\"POST\"])",
        "detail": "src.main.routes.cadastro",
        "documentation": {}
    },
    {
        "label": "pesquisa",
        "kind": 2,
        "importPath": "src.main.routes.cadastro",
        "description": "src.main.routes.cadastro",
        "peekOfCode": "def pesquisa():\n    http_request = request_adapter(request)\n    response = cadastro_compose().buscar_view(http_request)\n    return response\n@app_routes_bp.route(\"/atualizar\", methods=[\"POST\"])\ndef atualizar():\n    http_request = request_adapter(request)\n    response = cadastro_compose().atualizar_view(http_request)\n    return response",
        "detail": "src.main.routes.cadastro",
        "documentation": {}
    },
    {
        "label": "atualizar",
        "kind": 2,
        "importPath": "src.main.routes.cadastro",
        "description": "src.main.routes.cadastro",
        "peekOfCode": "def atualizar():\n    http_request = request_adapter(request)\n    response = cadastro_compose().atualizar_view(http_request)\n    return response",
        "detail": "src.main.routes.cadastro",
        "documentation": {}
    },
    {
        "label": "app_routes_bp",
        "kind": 5,
        "importPath": "src.main.routes.cadastro",
        "description": "src.main.routes.cadastro",
        "peekOfCode": "app_routes_bp = Blueprint(\"api_routes\", __name__)\n@app_routes_bp.route(\"/\")\ndef index():\n    return \"Hello to register clients!\"\n@app_routes_bp.route(\"/cadastro\", methods=[\"POST\"])\ndef cadastro():\n    http_request = request_adapter(request)\n    response = cadastro_compose().cadastrar_view(http_request)\n    return response\n@app_routes_bp.route(\"/delete\", methods=[\"PUT\"])",
        "detail": "src.main.routes.cadastro",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "src.main.serve",
        "description": "src.main.serve",
        "peekOfCode": "app = Flask(__name__)\nCORS(app)\napp.register_blueprint(app_routes_bp)",
        "detail": "src.main.serve",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "src.models.configs.base",
        "description": "src.models.configs.base",
        "peekOfCode": "Base = declarative_base()",
        "detail": "src.models.configs.base",
        "documentation": {}
    },
    {
        "label": "DBConnectionHandler",
        "kind": 6,
        "importPath": "src.models.configs.connection",
        "description": "src.models.configs.connection",
        "peekOfCode": "class DBConnectionHandler:\n    def __init__(self) -> None:\n        self.__connection_string = (\n            f\"mysql+pymysql://{USER_DB}:{PASSWORD_DB}@{HOST_DB}/{DATABASE_NAME}\"\n        )\n        self.__engine = self.__create_database_engine()\n        self.session = None\n    def __create_database_engine(self):\n        engine = create_engine(self.__connection_string)\n        return engine",
        "detail": "src.models.configs.connection",
        "documentation": {}
    },
    {
        "label": "PessoaEntity",
        "kind": 6,
        "importPath": "src.models.entities.pessoas",
        "description": "src.models.entities.pessoas",
        "peekOfCode": "class PessoaEntity(Base):\n    __tablename__ = 'pessoa'\n    id = Column(Integer, primary_key=True, nullable=False)\n    nome = Column(String(100), nullable=False)\n    idade = Column(Integer, nullable=False)\n    bairro = Column(String(200), nullable=False)\n    profissao = Column(String(200), nullable=False)",
        "detail": "src.models.entities.pessoas",
        "documentation": {}
    },
    {
        "label": "ICadastroRepo",
        "kind": 6,
        "importPath": "src.models.repositories.interface.Icadastro_repo",
        "description": "src.models.repositories.interface.Icadastro_repo",
        "peekOfCode": "class ICadastroRepo(ABC):\n    @abstractmethod\n    def get_clients(self) -> List[CadastroType]:\n        pass\n    @abstractmethod\n    def search_client_by_name(self, name: str) -> CadastroType or None:\n        pass\n    @abstractmethod\n    def delete_client_by_name(self, name: str) -> bool:\n        pass",
        "detail": "src.models.repositories.interface.Icadastro_repo",
        "documentation": {}
    },
    {
        "label": "CadastroRepository",
        "kind": 6,
        "importPath": "src.models.repositories.cadastro_repository",
        "description": "src.models.repositories.cadastro_repository",
        "peekOfCode": "class CadastroRepository(ICadastroRepo):\n    def get_clients(self):\n        with DBConnectionHandler() as db:\n            data = db.session.query(PessoaEntity).all()\n            return data\n    def insert_client(self, info_client):\n        with DBConnectionHandler() as db:\n            pessoa = PessoaEntity(\n                nome=info_client[\"nome\"].lower(),\n                idade=int(info_client[\"idade\"]),",
        "detail": "src.models.repositories.cadastro_repository",
        "documentation": {}
    },
    {
        "label": "CadastroType",
        "kind": 6,
        "importPath": "src.models.types.cadastro_type",
        "description": "src.models.types.cadastro_type",
        "peekOfCode": "class CadastroType:\n    def __init__(\n        self,\n        nome: str = None,\n        idade: int = None,\n        bairro: str = None,\n        profissao: str = None,\n    ):\n        self.nome = nome\n        self.idade = idade",
        "detail": "src.models.types.cadastro_type",
        "documentation": {}
    },
    {
        "label": "body_validator",
        "kind": 5,
        "importPath": "src.validators.validations.insert_user_validator",
        "description": "src.validators.validations.insert_user_validator",
        "peekOfCode": "body_validator = Validator(\n    {\n        \"nome\": {\"type\": \"string\", \"required\": True, \"empty\": False},\n        \"idade\": {\"type\": \"float\", \"required\": False, \"empty\": False},\n        \"bairro\": {\"type\": \"string\", \"required\": True, \"empty\": True},\n        \"profissao\": {\"type\": \"string\", \"required\": False, \"empty\": False},\n    }\n)",
        "detail": "src.validators.validations.insert_user_validator",
        "documentation": {}
    },
    {
        "label": "user_name_validator",
        "kind": 5,
        "importPath": "src.validators.validations.user_name_validator",
        "description": "src.validators.validations.user_name_validator",
        "peekOfCode": "user_name_validator = Validator(\n    {\n        \"nome\": {\"type\": \"string\", \"required\": True, \"empty\": False},\n    }\n)",
        "detail": "src.validators.validations.user_name_validator",
        "documentation": {}
    },
    {
        "label": "handle_validations",
        "kind": 2,
        "importPath": "src.validators.handle_validation",
        "description": "src.validators.handle_validation",
        "peekOfCode": "def handle_validations(validator:Validator, data: dict):\n    validate_data = validator.validate(data)\n    if not validate_data:\n        raise HttpUnprocessableEntityError(\n            message=\"Erro ao processar o body, verifique os parâmetros enviados\"\n        )",
        "detail": "src.validators.handle_validation",
        "documentation": {}
    },
    {
        "label": "test_handle_validation",
        "kind": 2,
        "importPath": "src.validators.handle_validation_test",
        "description": "src.validators.handle_validation_test",
        "peekOfCode": "def test_handle_validation():\n    data = {\n        \"nome\": \"Gabriel\",\n        \"idade\": 30,\n        \"bairro\": \"Riachuelo\",\n        \"profissao\": \"Programador\",\n    }\n    validate_data = mock_validator.validate(data)\n    assert validate_data is True\ndef test_error_handle_validation():",
        "detail": "src.validators.handle_validation_test",
        "documentation": {}
    },
    {
        "label": "test_error_handle_validation",
        "kind": 2,
        "importPath": "src.validators.handle_validation_test",
        "description": "src.validators.handle_validation_test",
        "peekOfCode": "def test_error_handle_validation():\n    data = {}\n    try:\n        validate_data = mock_validator.validate(data)\n    except Exception as exception:\n        assert isinstance(exception, HttpUnprocessableEntityError)\n        assert (\n            str(exception)\n            == \"Erro ao processar o body, verifique os parâmetros enviados\"\n        )",
        "detail": "src.validators.handle_validation_test",
        "documentation": {}
    },
    {
        "label": "mock_validator",
        "kind": 5,
        "importPath": "src.validators.handle_validation_test",
        "description": "src.validators.handle_validation_test",
        "peekOfCode": "mock_validator = Validator(\n    {\n        \"nome\": {\"type\": \"string\", \"required\": True, \"empty\": False},\n        \"idade\": {\"type\": \"float\", \"required\": False, \"empty\": False},\n        \"bairro\": {\"type\": \"string\", \"required\": True, \"empty\": True},\n        \"profissao\": {\"type\": \"string\", \"required\": False, \"empty\": False},\n    }\n)\ndef test_handle_validation():\n    data = {",
        "detail": "src.validators.handle_validation_test",
        "documentation": {}
    },
    {
        "label": "ViewsInterface",
        "kind": 6,
        "importPath": "src.views.interface.views_interface",
        "description": "src.views.interface.views_interface",
        "peekOfCode": "class ViewsInterface(ABC):\n    @abstractmethod\n    def cadastrar_view(self) -> HttpResponse:\n        pass\n    @abstractmethod\n    def buscar_view(self) -> HttpResponse:\n        pass\n    @abstractmethod\n    def deletar_view(self) -> HttpResponse:\n        pass",
        "detail": "src.views.interface.views_interface",
        "documentation": {}
    },
    {
        "label": "HttpRequest",
        "kind": 6,
        "importPath": "src.views.types_view.http_request",
        "description": "src.views.types_view.http_request",
        "peekOfCode": "class HttpRequest:\n    def __init__(\n        self,\n        headers: dict = None,\n        body: dict = None,\n        query_params: dict = None,\n        url: str = None,\n        token_information: dict = None\n    ):\n        self.header = headers",
        "detail": "src.views.types_view.http_request",
        "documentation": {}
    },
    {
        "label": "HttpResponse",
        "kind": 6,
        "importPath": "src.views.types_view.http_response",
        "description": "src.views.types_view.http_response",
        "peekOfCode": "class HttpResponse:\n    def __init__(self, status_code: int, response, message: str) -> None:\n        self.status_code = status_code\n        self.message = message\n        self.response = response",
        "detail": "src.views.types_view.http_response",
        "documentation": {}
    },
    {
        "label": "CadastroView",
        "kind": 6,
        "importPath": "src.views.cadastro_view",
        "description": "src.views.cadastro_view",
        "peekOfCode": "class CadastroView:\n    def __init__(self, cadastro_controller: ICadastroController) -> None:\n        self.__controller = cadastro_controller\n    def cadastrar_view(self, http_request: HttpRequest) -> HttpResponse:\n        try:\n            handle_validations(body_validator, http_request.body)\n            response = self.__controller.cadastrar_pessoa(http_request.body)\n            return response\n        except Exception as exception:\n            return str(exception)",
        "detail": "src.views.cadastro_view",
        "documentation": {}
    },
    {
        "label": "MockCadastroController",
        "kind": 6,
        "importPath": "src.views.cadastro_view_test",
        "description": "src.views.cadastro_view_test",
        "peekOfCode": "class MockCadastroController:\n    def cadastrar_pessoa(self, pessoa: CadastroType) -> HttpResponse:\n        return {\n            \"status_code\": 201,\n            \"message\": \"Cadastro Realizado Com Sucesso\",\n            \"response\": {\n                \"nome\": pessoa[\"nome\"],\n                \"idade\": pessoa[\"idade\"],\n                \"bairro\": pessoa[\"bairro\"],\n                \"profissão\": pessoa[\"profissao\"],",
        "detail": "src.views.cadastro_view_test",
        "documentation": {}
    },
    {
        "label": "pessoa_mock",
        "kind": 5,
        "importPath": "src.views.cadastro_view_test",
        "description": "src.views.cadastro_view_test",
        "peekOfCode": "pessoa_mock = (\n    {\n        \"nome\": \"gabriel\",\n        \"idade\": 30,\n        \"bairro\": \"Maracanã\",\n        \"profissão\": \"Programador\",\n    },\n)\nclass MockCadastroController:\n    def cadastrar_pessoa(self, pessoa: CadastroType) -> HttpResponse:",
        "detail": "src.views.cadastro_view_test",
        "documentation": {}
    }
]